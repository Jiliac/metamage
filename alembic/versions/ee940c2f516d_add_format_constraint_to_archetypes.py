"""Add format constraint to archetypes

Revision ID: ee940c2f516d
Revises: 689545bc6892
Create Date: 2025-08-09 17:47:36.064600

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import uuid


# revision identifiers, used by Alembic.
revision: str = 'ee940c2f516d'
down_revision: Union[str, Sequence[str], None] = '689545bc6892'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 1) Add the new column as nullable to avoid issues with existing rows (SQLite-safe)
    op.add_column('archetypes', sa.Column('format_id', sa.String(length=36), nullable=True))
    op.create_index(op.f('ix_archetypes_format_id'), 'archetypes', ['format_id'], unique=False)

    # 2) Backfill format_id for existing rows using a placeholder format
    bind = op.get_bind()
    unknown_name = "__UNKNOWN__"
    existing_id = bind.execute(
        sa.text("SELECT id FROM formats WHERE name = :name LIMIT 1"),
        {"name": unknown_name},
    ).scalar()
    if existing_id is None:
        unknown_id = str(uuid.uuid4())
        bind.execute(
            sa.text("INSERT INTO formats (id, name) VALUES (:id, :name)"),
            {"id": unknown_id, "name": unknown_name},
        )
        format_id = unknown_id
    else:
        format_id = existing_id

    bind.execute(
        sa.text("UPDATE archetypes SET format_id = :fmt_id WHERE format_id IS NULL"),
        {"fmt_id": format_id},
    )

    # 3) Enforce NOT NULL and add FK + new unique constraint (SQLite batch)
    with op.batch_alter_table('archetypes', schema=None) as batch_op:
        batch_op.alter_column('format_id', existing_type=sa.String(length=36), nullable=False)
        batch_op.drop_constraint('uq_archetype_name', type_='unique')  # Drop old constraint
        batch_op.create_unique_constraint('uq_archetype_format_name', ['format_id', 'name'])
        batch_op.create_foreign_key('fk_archetype_format', 'formats', ['format_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('archetypes', schema=None) as batch_op:
        batch_op.drop_constraint('fk_archetype_format', type_='foreignkey')
        batch_op.drop_constraint('uq_archetype_format_name', type_='unique')

    op.drop_index(op.f('ix_archetypes_format_id'), table_name='archetypes')

    with op.batch_alter_table('archetypes', schema=None) as batch_op:
        batch_op.drop_column('format_id')
        batch_op.create_unique_constraint('uq_archetype_name', ['name'])  # Restore old unique constraint on name

    # ### end Alembic commands ###
